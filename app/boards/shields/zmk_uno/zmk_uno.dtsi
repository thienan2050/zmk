/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/led/led.h>
#include <dt-bindings/zmk/matrix_transform.h>
#include "zmk_uno-layouts.dtsi"


&arduino_i2c {
    status = "okay";
};

nice_view_spi: &arduino_spi {
    status = "okay";

    cs-gpios = <&arduino_header 16 GPIO_ACTIVE_HIGH>;

    // Needed so the nice_view shield will enhance the existing node which falls *first*
    // on the bus, properly picking up the first `cs-gpios` specifier.
    ls0xx@0 {
        reg = <0>;
    };

    led_strip: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";

        /* SPI */
        reg = <0>; /* ignored, but necessary for SPI bindings */
        spi-max-frequency = <4000000>;

        /* WS2812 */
        chain-length = <7>; /* 4 underglow + 3 per-key LEDs */
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;

        color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
    };
};

/ {
    chosen {
        zmk,backlight = &backlight;
        zmk,underglow = &led_strip;
    };

    // Commented out until we add more powerful power domain support
    // external_power {
        //  compatible = "zmk,ext-power-generic";
        //  init-delay-ms = <200>;
        //  control-gpios = <&arduino_header 1 GPIO_ACTIVE_LOW>;
    // };

    rgb_power {
        compatible = "zmk,ext-power-generic";
        init-delay-ms = <200>;
        control-gpios = <&arduino_header 1 GPIO_ACTIVE_LOW>;
    };

    backlight: gpioleds {
        compatible = "gpio-leds";
        gpio_led_0 {
            gpios = <&arduino_header 12 GPIO_ACTIVE_HIGH>;
        };
    };

    matrix_transform: matrix_transform {
        compatible = "zmk,matrix-transform";
        columns = <8>;
        rows = <5>;
        map = <
        RC(255,255) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) 
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) 
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) 
        RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6)
        RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) 
        >;
        };

    direct_matrix_transform: direct_matrix_transform {
        compatible = "zmk,matrix-transform";
        rows = <3>;
        columns = <4>;

        map = <
        RC(0,0) RC(0,1)
        RC(0,2) RC(0,3)
        >;
    };

    // kscan_matrix: kscan_matrix {
    //     compatible = "zmk,kscan-gpio-matrix";
    //     wakeup-source;

    //     diode-direction = "col2row";

    //     row-gpios
    //         = <&gpio0 6  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    //         , <&gpio0 7  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    //         , <&gpio0 27 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    //         , <&gpio0 31 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    //         , <&gpio0 28 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    //         , <&gpio0 29 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    //         , <&gpio0 26 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    //         , <&gpio0 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
    //         ;

    //     col-gpios
    //         = <&gpio1 0  (GPIO_ACTIVE_HIGH)>
    //         , <&gpio0 21 (GPIO_ACTIVE_HIGH)>
    //         , <&gpio0 23 (GPIO_ACTIVE_HIGH)>
    //         , <&gpio0 4  (GPIO_ACTIVE_HIGH)>
    //         , <&gpio0 30 (GPIO_ACTIVE_HIGH)>
    //         ;

    // };
        kscan_matrix: kscan_matrix {
        compatible = "zmk,kscan-gpio-matrix";
        wakeup-source;

        diode-direction = "row2col";

        col-gpios
            = <&gpio0 6  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpio0 7  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpio0 27 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpio0 31 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpio0 28 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpio0 29 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpio0 26 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&gpio0 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;

        row-gpios
            = <&gpio1 0  (GPIO_ACTIVE_HIGH)>
            , <&gpio0 21 (GPIO_ACTIVE_HIGH)>
            , <&gpio0 23 (GPIO_ACTIVE_HIGH)>
            , <&gpio0 4  (GPIO_ACTIVE_HIGH)>
            , <&gpio0 30 (GPIO_ACTIVE_HIGH)>
            ;

    };


    kscan_direct: kscan_direct {
        compatible = "zmk,kscan-gpio-direct";
        wakeup-source;

        input-gpios
        = <&arduino_header 10 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
        , <&arduino_header 9  (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
        , <&arduino_header 13 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
        , <&arduino_header 11 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
        ;

    };

    kscan_sp3t_toggle: kscan_sp3t_toggle {
        compatible = "zmk,kscan-gpio-direct";
        toggle-mode;

        input-gpios
        = <&arduino_header 4 GPIO_ACTIVE_LOW>
        , <&arduino_header 3 GPIO_ACTIVE_LOW>
        , <&arduino_header 2 GPIO_ACTIVE_LOW>
        ;
    };

    encoder: encoder {
        steps = <80>;
        compatible = "alps,ec11";
        a-gpios = <&arduino_header 15 GPIO_PULL_UP>;
        b-gpios = <&arduino_header 14 GPIO_PULL_UP>;
    };
};

&matrix_physical_layout {
    kscan = <&kscan_matrix>;
    transform = <&matrix_transform>;
};

&direct_physical_layout {
    kscan = <&kscan_direct>;
    transform = <&direct_matrix_transform>;
};